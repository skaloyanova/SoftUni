{
	"info": {
		"_postman_id": "9c3c9987-ad14-4f70-92e6-2d50c0fba32d",
		"name": "ExamPrep1 - Idea Center API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11249562"
	},
	"item": [
		{
			"name": "User Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJSON = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"token\", responseJSON.accessToken);\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should include attributes 'email', 'password' and 'accessToken' and are not empty\", () => {\r",
							"    pm.expect(responseJSON).has.keys('email', 'password', 'accessToken');\r",
							"    pm.expect(responseJSON.email).not.to.be.empty;\r",
							"    pm.expect(responseJSON.password).not.to.be.empty;\r",
							"    pm.expect(responseJSON.accessToken).not.to.be.empty;\r",
							"})\r",
							"\r",
							"pm.test(\"Access token is not null\", () => {\r",
							"    pm.expect(responseJSON.accessToken).is.not.null;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"testUser123@example.com\",\r\n  \"password\": \"parola\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/User/Authentication",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"User",
						"Authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Idea",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomName = \"Idea-\" + Math.floor(Math.random() * 1000);\r",
							"\r",
							"pm.collectionVariables.set(\"randomTitle\", randomName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJSON = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should include message 'Successfully created!'\", () => {\r",
							"    pm.expect(responseJSON.msg).to.equals(\"Successfully created!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should include correct title for the created idea\", () => {\r",
							"    pm.expect(responseJSON.idea.title).to.exist.and.to.equals(pm.collectionVariables.get(\"randomTitle\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should include correct description for the created idea\", () => {\r",
							"    pm.expect(responseJSON.idea.description).to.exist.and.to.equals(`Description for ${pm.collectionVariables.get(\"randomTitle\")}`);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"{{randomTitle}}\",\r\n  \"url\": \"\",\r\n  \"description\": \"Description for {{randomTitle}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Idea/Create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"Create"
					]
				}
			},
			"response": []
		},
		{
			"name": "List All Ideas",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJSON = pm.response.json();",
							"",
							"const lastIdea = responseJSON[responseJSON.length - 1];",
							"const lastIdeaId = lastIdea.id;",
							"",
							"pm.collectionVariables.set(\"lastIdeaId\", lastIdeaId);",
							"",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be an array and should contain at least one item\", () => {",
							"    pm.expect(responseJSON).to.be.an(\"array\");",
							"    pm.expect(responseJSON).not.to.be.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Idea/All",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"All"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Idea",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJSON = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should include message 'Edited successfully'\", () => {\r",
							"    pm.expect(responseJSON.msg).to.equals(\"Edited successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\"Title in response body should matches the new title provided\", () => {\r",
							"    pm.expect(responseJSON.idea.title).to.equals(`${pm.collectionVariables.get(\"randomTitle\")} UPDATED`);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"{{randomTitle}} UPDATED\",\r\n  \"url\": \"\",\r\n  \"description\": \"Description updated\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Idea/Edit?ideaId={{lastIdeaId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"Edit"
					],
					"query": [
						{
							"key": "ideaId",
							"value": "{{lastIdeaId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Idea",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of the response body should be string\", () => {\r",
							"    pm.expect(pm.response.text()).to.be.a('string');\r",
							"})\r",
							"\r",
							"pm.test(\"Response should include text 'The idea is deleted!'\", () => {\r",
							"    pm.expect(pm.response.text()).to.equals(\"The idea is deleted!\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Idea/Delete?ideaId={{lastIdeaId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"Delete"
					],
					"query": [
						{
							"key": "ideaId",
							"value": "{{lastIdeaId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://softuni-qa-loadbalancer-2137572849.eu-north-1.elb.amazonaws.com:84",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "newIdeaName",
			"value": ""
		},
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "lastIdeaId",
			"value": ""
		}
	]
}